// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/**
 * ---------- Enums ----------
 */

enum Subscription {
  BASIC    @map("FREE")
  GOLD
  PLATINUM
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum ProductStatus {
  ACTIVE
  SOLD
  HIDDEN
  DRAFT
}

enum PaymentMethod {
  MPESA
}

/**
 * Support tickets
 */
enum TicketType {
  CONTACT
  BUG
  REPORT_LISTING
  REPORT_USER
  OTHER
}

enum TicketStatus {
  OPEN
  IN_REVIEW
  RESOLVED
  CLOSED
}

/**
 * ---------- Models ----------
 */

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  name          String?
  username      String?   @unique
  image         String?

  // Credentials login (optional)
  passwordHash String? @db.Text

  // Profile / contact fields
  phone      String? @db.VarChar(20)
  whatsapp   String? @db.VarChar(20)
  address    String?
  postalCode String?
  city       String?
  country    String?
  verified   Boolean @default(false)

  // Plans / roles
  subscription      Subscription @default(BASIC)
  subscriptionUntil DateTime?
  role              Role         @default(USER)

  // Simple self-referral link (who referred me?)
  referralCode      String? @unique
  referredById      String?
  referredBy        User?   @relation("ReferralsTo", fields: [referredById], references: [id])
  referrals         User[]  @relation("ReferralsTo")
  referralQualified Int     @default(0)

  // Explicit referral edges (separate model below)
  referralsSent     Referral[] @relation("ReferralInviter")
  referralsReceived Referral[] @relation("ReferralInvitee")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products  Product[]       @relation("UserProducts")
  favorites Favorite[]
  payments  Payment[]       @relation("UserPayments")
  tickets   SupportTicket[] @relation("ReporterTickets")
  sessions  Session[]
  accounts  Account[]
}

model Referral {
  id          String    @id @default(cuid())
  code        String
  inviterId   String
  inviteeId   String    @unique
  createdAt   DateTime  @default(now())
  qualifiedAt DateTime?

  inviter User @relation("ReferralInviter", fields: [inviterId], references: [id])
  invitee User @relation("ReferralInvitee", fields: [inviteeId], references: [id])

  @@unique([inviterId, inviteeId])
  @@index([code])
}

model Product {
  id          String        @id @default(uuid())
  name        String
  description String?       @db.Text
  category    String
  subcategory String
  brand       String?
  condition   String?
  price       Int?
  image       String?
  gallery     String[]      @default([])
  location    String?
  negotiable  Boolean       @default(false)
  status      ProductStatus @default(ACTIVE)
  soldAt      DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  sellerId String?
  seller   User?   @relation("UserProducts", fields: [sellerId], references: [id])

  // Seller snapshot for listing cards
  sellerName        String?
  sellerPhone       String?
  sellerLocation    String?
  sellerMemberSince String?
  sellerRating      Float?
  sellerSales       Int?

  featured Boolean @default(false)

  favorites      Favorite[]
  payments       Payment[]       @relation("ProductPayments")
  contactReveals ContactReveal[]
  tickets        SupportTicket[] @relation("TicketProducts")

  @@index([category, subcategory])
  @@index([brand])
  @@index([price])
  @@index([createdAt])
  @@index([featured])
  @@index([sellerId, createdAt])
}

model Favorite {
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([userId, productId])
  @@index([productId])
}

model Payment {
  id       String        @id @default(cuid())
  status   PaymentStatus @default(PENDING)
  method   PaymentMethod @default(MPESA)
  currency String        @default("KES")

  amount     Int
  payerPhone String @db.VarChar(15)

  paidAt DateTime? @map("transactionDate")

  mpesaReceipt      String? @unique
  checkoutRequestId String? @unique
  merchantRequestId String? @unique

  accountRef String? @db.VarChar(12)

  rawCallback Json?

  productId String?
  product   Product? @relation("ProductPayments", fields: [productId], references: [id], onDelete: SetNull)

  userId String?
  user   User?   @relation("UserPayments", fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, createdAt])
  @@index([userId, createdAt])
  @@index([productId, createdAt])
  @@index([accountRef])
}

model ContactReveal {
  id           String   @id @default(cuid())
  productId    String
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  viewerUserId String?
  ip           String?
  userAgent    String?
  createdAt    DateTime @default(now())

  // one per (product, user); guests allowed (viewerUserId = null)
  @@unique([productId, viewerUserId])
  @@index([productId, createdAt])
  @@index([viewerUserId, createdAt])
  @@index([ip, createdAt])
}

model SupportTicket {
  id     String       @id @default(cuid())
  type   TicketType   @default(CONTACT)
  status TicketStatus @default(OPEN)

  name    String?
  email   String?
  subject String?
  message String  @db.Text

  url        String?
  productId  String?
  reporterId String?

  product  Product? @relation("TicketProducts", fields: [productId], references: [id], onDelete: SetNull)
  reporter User?    @relation("ReporterTickets", fields: [reporterId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type, createdAt])
  @@index([status, createdAt])
  @@index([productId, createdAt])
  @@index([reporterId, createdAt])
}

/**
 * ---------- NextAuth ----------
 */

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@unique([token])
}
