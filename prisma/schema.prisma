// prisma/schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"] // enables datasource.extensions
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  // Keep citext for case-insensitive unique(email/username). Add pg_trgm later if needed.
  extensions = [citext()]
}

/**
 * ---------- Enums ----------
 */

enum Subscription {
  BASIC    @map("FREE")
  GOLD
  PLATINUM
}

/**
 * Roles:
 * - USER: default
 * - MODERATOR: limited moderation tools (kept for compatibility)
 * - ADMIN: full admin console
 * - SUPERADMIN: platform owner; can grant/revoke ADMIN/MODERATOR
 */
enum Role {
  USER
  MODERATOR
  ADMIN
  SUPERADMIN
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

/**
 * Unified status for both Product and Service (matches UI/API)
 * NOTE: Aligns with API which uses ACTIVE | DRAFT | HIDDEN | SOLD
 */
enum ListingStatus {
  ACTIVE
  DRAFT
  HIDDEN
  SOLD
}

enum PaymentMethod {
  MPESA
}

/**
 * Support tickets
 */
enum TicketType {
  CONTACT
  BUG
  REPORT_LISTING
  REPORT_USER
  OTHER
}

enum TicketStatus {
  OPEN
  IN_REVIEW
  RESOLVED
  CLOSED
}

/**
 * Services
 */
enum RateType {
  hour
  day
  fixed
}

/**
 * Moderation reports
 */
enum ReportListingType {
  product
  service
}

/**
 * Messaging
 */
enum ListingType {
  product
  service
}

enum ReportReason {
  scam
  prohibited
  spam
  wrong_category
  counterfeit
  offensive
  other
}

/**
 * ---------- Models ----------
 */

model User {
  id            String    @id @default(cuid())
  email         String?   @unique @db.Citext
  emailVerified DateTime?
  name          String?
  username      String?   @unique @db.Citext
  image         String?

  // Credentials login (optional)
  passwordHash String? @db.Text

  // Profile / contact fields
  phone      String? @db.VarChar(20)
  whatsapp   String? @db.VarChar(20)
  address    String?
  postalCode String?
  city       String?
  country    String?

  // Common “location” string used in listing snapshots (optional, denormalized)
  location String?

  // Marketplace reputation snapshot fields used by creation endpoints
  rating Float?
  sales  Int?

  verified Boolean @default(false)

  // Plans / roles
  subscription      Subscription @default(BASIC)
  subscriptionUntil DateTime?
  role              Role         @default(USER)

  // Self-referral
  referralCode      String? @unique
  referredById      String?
  referredBy        User?   @relation("ReferralsTo", fields: [referredById], references: [id])
  referrals         User[]  @relation("ReferralsTo")
  referralQualified Int     @default(0)

  // Explicit referral edges
  referralsSent     Referral[] @relation("ReferralInviter")
  referralsReceived Referral[] @relation("ReferralInvitee")

  reviewsGiven    Review[] @relation("UserReviewsGiven")
  reviewsReceived Review[] @relation("UserReviewsReceived")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products  Product[]       @relation("UserProducts")
  services  Service[]       @relation("UserServices")
  favorites Favorite[]
  payments  Payment[]       @relation("UserPayments")
  tickets   SupportTicket[] @relation("ReporterTickets")
  reports   Report[]        @relation("Reporters")

  // Messaging back-relations
  threadsBought Thread[]  @relation("ThreadBuyer")
  threadsSold   Thread[]  @relation("ThreadSeller")
  messagesSent  Message[]

  // Audit logs:
  // - logs this user authored (actor)
  auditAsActor  AuditLog[] @relation("AuditActor")
  // - logs where this user was the target of an action
  auditAsTarget AuditLog[] @relation("AuditTarget")

  sessions Session[]
  accounts Account[]

  // Helpful indexes
  @@index([role])
}

model Referral {
  id          String    @id @default(cuid())
  code        String
  inviterId   String
  inviteeId   String    @unique
  createdAt   DateTime  @default(now())
  qualifiedAt DateTime?

  inviter User @relation("ReferralInviter", fields: [inviterId], references: [id])
  invitee User @relation("ReferralInvitee", fields: [inviteeId], references: [id])

  @@unique([inviterId, inviteeId])
  @@index([code])
}

model Product {
  id          String        @id @default(uuid())
  name        String
  description String?       @db.Text
  category    String
  subcategory String
  brand       String?
  condition   String?
  price       Int?
  image       String?
  gallery     String[]      @default([])
  location    String?
  negotiable  Boolean       @default(false)
  status      ListingStatus @default(ACTIVE)
  soldAt      DateTime?

  /// When the listing becomes visible (set on create)
  publishedAt DateTime? @default(now())

  /// Optional dedupe key (sha256 hex) used by create endpoint
  dedupeKey String? @db.VarChar(64)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sellerId String?
  seller   User?   @relation("UserProducts", fields: [sellerId], references: [id])

  // Seller snapshot for listing cards
  sellerName        String?
  sellerPhone       String?
  sellerLocation    String?
  sellerMemberSince String?
  sellerRating      Float?
  sellerSales       Int?

  featured Boolean @default(false)

  favorites      Favorite[]
  payments       Payment[]       @relation("ProductPayments")
  contactReveals ContactReveal[]
  tickets        SupportTicket[] @relation("TicketProducts")

  /// ---------- Indexes tuned for your queries ----------
  @@index([status, featured, createdAt(sort: Desc)])
  @@index([status, createdAt(sort: Desc)])
  @@index([status, category, subcategory, createdAt(sort: Desc)])
  @@index([status, price])
  @@index([sellerId, status, createdAt(sort: Desc)])
  @@index([status, brand])
  /// Published ordering
  @@index([status, featured, publishedAt(sort: Desc)])
  @@index([status, publishedAt(sort: Desc)])
  @@index([status, category, subcategory, publishedAt(sort: Desc)])
  @@index([sellerId, status, publishedAt(sort: Desc)])
  /// Per-seller duplicate checks
  @@index([sellerId, dedupeKey, createdAt(sort: Desc)])
}

model Service {
  id           String        @id @default(uuid())
  name         String
  description  String?       @db.Text
  category     String
  subcategory  String?
  price        Int? // null => “contact for quote”
  rateType     RateType      @default(fixed)
  serviceArea  String?
  availability String?
  image        String?
  gallery      String[]      @default([])
  location     String?
  status       ListingStatus @default(ACTIVE)
  featured     Boolean       @default(false)

  /// Visible-from timestamp (set on create)
  publishedAt DateTime? @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sellerId String?
  seller   User?   @relation("UserServices", fields: [sellerId], references: [id])

  // Seller snapshot (parity with Product for cards)
  sellerName        String?
  sellerPhone       String?
  sellerLocation    String?
  sellerMemberSince String?
  sellerRating      Float?
  sellerSales       Int?

  // Optional relation if you choose to persist media in a join table
  images ServiceImage[]

  SupportTicket     SupportTicket[]

  /// ---------- Indexes ----------
  @@index([status, featured, createdAt(sort: Desc)])
  @@index([status, createdAt(sort: Desc)])
  @@index([status, category, subcategory, createdAt(sort: Desc)])
  @@index([status, price])
  @@index([sellerId, status, createdAt(sort: Desc)])
  /// Published ordering
  @@index([status, featured, publishedAt(sort: Desc)])
  @@index([status, publishedAt(sort: Desc)])
  @@index([status, category, subcategory, publishedAt(sort: Desc)])
  @@index([sellerId, status, publishedAt(sort: Desc)])
  /// FK-only fast path when you need a naïve seller filter
  @@index([sellerId])
}

/**
 * Optional media table for services.
 * If you don't need it yet, you can keep it and just not write to it; your API
 * already tolerates its absence. Defining it now gives you indexed lookups when used.
 */
model ServiceImage {
  id        String  @id @default(cuid())
  serviceId String
  url       String  @db.Text
  createdAt DateTime @default(now())

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId, createdAt(sort: Desc)])
  @@index([serviceId])
}

model Favorite {
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Make deletes of users/products clean up favorites automatically
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([userId, productId])
  @@index([productId])
}

model Payment {
  id       String        @id @default(cuid())
  status   PaymentStatus @default(PENDING)
  method   PaymentMethod @default(MPESA)
  currency String        @default("KES")

  amount     Int
  payerPhone String @db.VarChar(15)

  paidAt DateTime? @map("transactionDate")

  mpesaReceipt      String? @unique
  checkoutRequestId String? @unique
  merchantRequestId String? @unique

  accountRef  String? @db.VarChar(12)
  resultDesc  String?
  rawCallback Json?

  productId String?
  product   Product? @relation("ProductPayments", fields: [productId], references: [id], onDelete: SetNull)

  userId String?
  user   User?   @relation("UserPayments", fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, createdAt])
  @@index([userId, createdAt])
  @@index([productId, createdAt])
  @@index([accountRef])
}

model ContactReveal {
  id           String   @id @default(cuid())
  productId    String
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  viewerUserId String?
  ip           String?
  userAgent    String?
  createdAt    DateTime @default(now())

  @@unique([productId, viewerUserId])
  @@index([productId, createdAt])
  @@index([viewerUserId, createdAt])
  @@index([ip, createdAt])
}

model SupportTicket {
  id     String       @id @default(cuid())
  type   TicketType   @default(CONTACT)
  status TicketStatus @default(OPEN)

  name    String?
  email   String?
  subject String?
  message String  @db.Text

  url        String?
  productId  String?
  serviceId  String? // used by API
  reporterId String?

  // Optional telemetry
  clientIp    String?
  userAgent   String?
  referer     String?
  contentHash String? @db.Char(64)

  product  Product? @relation("TicketProducts", fields: [productId], references: [id], onDelete: SetNull)
  service  Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  reporter User?    @relation("ReporterTickets", fields: [reporterId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type, createdAt])
  @@index([status, createdAt])
  @@index([productId, createdAt])
  @@index([serviceId, createdAt])
  @@index([reporterId, createdAt])
  @@index([email, createdAt])
  @@index([contentHash, createdAt])
}

model Report {
  id          String            @id @default(cuid())
  listingId   String
  listingType ReportListingType
  reason      ReportReason
  details     String?
  ip          String?
  userId      String?
  user        User?             @relation("Reporters", fields: [userId], references: [id], onDelete: SetNull)

  resolved     Boolean   @default(false)
  resolvedById String?
  resolvedAt   DateTime?

  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([listingType, listingId])
  @@index([resolved, createdAt])
  @@index([userId])
}

/**
 * ---------- Audit Log ----------
 * Records privileged actions (e.g., role changes).
 */
model AuditLog {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())

  actorId      String?
  targetUserId String?
  action       String            // e.g. "role_change"
  meta         Json?

  actor       User? @relation("AuditActor",  fields: [actorId],      references: [id], onDelete: SetNull)
  targetUser  User? @relation("AuditTarget", fields: [targetUserId], references: [id], onDelete: SetNull)

  @@index([createdAt])
  @@index([targetUserId, createdAt(sort: Desc)])
}

/**
 * ---------- Messaging ----------
 */
model Thread {
  id          String      @id @default(cuid())
  listingType ListingType
  listingId   String

  buyerId  String
  sellerId String

  buyerHidden  Boolean @default(false)
  sellerHidden Boolean @default(false)

  lastMessageAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  buyerLastReadAt  DateTime?
  sellerLastReadAt DateTime?

  // IMPORTANT: relation names align with User model
  buyer  User @relation("ThreadBuyer", fields: [buyerId], references: [id], onDelete: Cascade)
  seller User @relation("ThreadSeller", fields: [sellerId], references: [id], onDelete: Cascade)

  messages Message[]

  @@unique([listingType, listingId, buyerId, sellerId])
  @@index([buyerId, lastMessageAt(sort: Desc)])
  @@index([sellerId, lastMessageAt(sort: Desc)])
  @@index([listingType, listingId])
}

model Message {
  id        String   @id @default(cuid())
  threadId  String
  senderId  String
  body      String   @db.Text
  createdAt DateTime @default(now())

  deletedAt DateTime?
  readAt    DateTime?

  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([threadId, createdAt])
  @@index([senderId, createdAt])
}

/**
 * ---------- NextAuth ----------
 */

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@unique([token])
}

model Review {
  id        String  @id @default(cuid())
  raterId   String
  rateeId   String
  listingId String? // optional: product/service id

  rating Int
  text   String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rater User @relation("UserReviewsGiven", fields: [raterId], references: [id], onDelete: Cascade)
  ratee User @relation("UserReviewsReceived", fields: [rateeId], references: [id], onDelete: Cascade)

  @@index([rateeId])
  @@index([raterId])
  @@index([listingId])
}
